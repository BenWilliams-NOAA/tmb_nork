[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Bridging the Gulf of Alaska northern rockfish model from ADMB to RTMB. The ADMB program is in the process of an ‘orderly shutdown of development’ (see: ADMB) and TMB is a viable alternative for fishery stock assesment development. RTMB allows for using the native R interface to TMB (Template Model Builder) so models can be written entirely in R rather than C++ (Kristensen 2024).\nTo compare model outputs last full model accepted by the SSC for northern rockfish ADMB model 22.1 was evaluated. The ADMB code was transferred to RTMB code. Then the model was run using the parameter outputs from the ADMB model, direct differences between model outputs and percent difference of key components are presented.\nAll associated code is available\n\n\n\n\nKristensen, Kasper. 2024. RTMB: ’R’ Bindings for ’TMB’. https://github.com/kaskr/rtmb."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Summary\nIn summary, the models appear to be effectively equivalent and I propose transitioning the northern rockfish assessment into the RTMB framework. Note: the nll of all values aren’t shown here, but are the same between the ADMB and RTMB models"
  },
  {
    "objectID": "model_run.html",
    "href": "model_run.html",
    "title": "Running a model",
    "section": "",
    "text": "Running a model\nData are provided in a list format, these data are the same as those used in the ADMB model 22.1 and can be found in the .dat and .ctl files.\n\n\nCode\n# inputs ------------------\ndata &lt;- list(ages = ages,\n             years = years,\n             length_bins = 15:45,\n             waa = waa,\n             wt_mature = maa * waa / 2,\n             spawn_mo = 5,\n             catch_obs = catch_obs,\n             catch_wt = c(rep(5, 17), rep(50, 45)),\n             srv_obs = srv_obs,\n             srv_ind = srv_ind,\n             srv_sd = srv_sd,\n             srv_wt = 0.25,\n             fish_age_obs = fish_age_obs,\n             fish_age_ind = fish_age_ind,\n             fish_age_iss = fish_age_iss,\n             fish_age_wt = 0.5,\n             srv_age_obs = srv_age_obs,\n             srv_age_ind = srv_age_ind,\n             srv_age_iss = srv_age_iss,\n             srv_age_wt = 0.5,\n             fish_size_obs = fish_size_obs,\n             fish_size_ind = fish_size_ind,\n             fish_size_iss = fish_size_iss,\n             fish_size_wt = 0.5,\n             age_error = age_error,\n             size_age = size_age,\n             wt_fmort_reg = 0.1,\n             wt_rec_var = 1,\n             f_regularity = 0.1,\n             mean_M = 0.06,\n             cv_M = 0.05,\n             mean_q = 1,\n             cv_q = 0.45,\n             mean_sigmaR = 1.5,\n             cv_sigmaR = 0.01,\n             yield_ratio = yield_ratio)\n\n\nInput parameters are also incorporated in a list format. The are the values from the ADMB model 22.1 output .par. Note - the log_rec_dev values are in a different order due to changes in indexing in the model. The ADMB model indexes by actual year, whereas the RTMB model indexes on 1:T, with T = number of years.\n\n\nCode\n# parameters ----------------\npars &lt;- list(log_M = log(0.05949983),\n             log_a50C = log(8.23719578492),\n             deltaC = 1.91866640868,\n             log_a50S = log(9.09355629491),\n             deltaS = 4.31923047888,\n             log_q = log(0.8649374),\n             log_mean_R = 3.50391,\n             init_log_Rt = c(-1.31784331510, -1.41353004574, -1.45443795306, -1.44801600013, \n                             -1.44317223143, -1.47227774217, -1.51491209802, -1.54201844034, \n                             -1.54900822105, -1.54357308125, -1.53271591530, -1.51992650551, \n                             -1.50655074209, -1.49298490737, -1.47936419813, -1.46579792964, \n                             -1.45236085259, -1.43911454732, -1.42609004023, -1.41334175243, \n                             -1.40089855851, -1.38878689192, -1.37702228101, -1.36561634960, \n                             -1.35457991448, -1.34391631981, -1.33362760589, -1.32371409445, \n                             -1.31417494445, -1.30500561365, -1.29620121156, -1.28775584994, \n                             -1.27966176612, -1.27190998138, -1.26449234040, -1.25740132870, \n                             -1.25062646041, -1.24415861470, -1.23798650648, -1.23210097519, \n                             -1.22649216166, -1.22115043981, -1.21606506031, -1.21122735382, \n                             -1.20662780636, -1.20225344500, -1.19809591673, -1.19414750188),\n             log_Rt = c(-1.18621056605,\n                        -1.03273909462,-0.999797306673 ,-1.17237515921,-1.31481440189, -1.29947684085,\n                        -1.19650952919, -1.07269785625, -0.858740244220 ,-0.648271337659, -0.687069961675,\n                        0.445219166778, -0.468276695996, -0.563352814004, -0.453027729654, -0.584195538322,\n                        -0.429755690388, 0.614844946205, 0.243664403047, -0.400119220417, -0.500707835112,\n                        -0.335760494094, -0.00147160235074, 0.205169356072, -0.589731491602, 0.662087934070,\n                        -0.0974724220631, -0.772529863247, -0.459399034102, -0.338932984917 ,-1.22764801352,\n                        -0.470463642208, -0.821606342481, -0.909630584967, -1.23654078531, 0.436194651298,\n                        0.0259279936320, -0.463748734096, -0.359703385166, 0.182589967526, -0.706622061830,\n                        -1.01841380990, -0.793317388193, -1.45663999946, -2.24234182204, -2.25003316068,\n                        -1.76689920898, -1.93202614806, -1.74725802806, -1.63462815593, -1.62908024719,\n                        -1.84514613721, -2.16498687286, -1.76579171915, -1.89444424903, -1.60259969329,\n                        -1.75681180416, -1.48983850684, -1.39173905744, -1.25892345656, -1.18461587351, \n                        -1.12500000434),\n             log_mean_F = -3.58385236595,\n             log_Ft =  c(-1.28306124683, 0.140199833981, 0.952641543234, 1.67793968633, 2.28974699704, \n                         1.91823978977,1.51557034959, 1.40878774713, 1.12294109172, 0.646529313912, \n                         1.20801861960, 1.24452195275, 0.942561137836, 0.835801151139, 0.798114766724,\n                         0.644693350645, -0.735539824209, -1.02062427087, -0.991743165230, -0.920367489050,\n                         -0.403644808221, 0.516721388258, 0.389882559033, -0.981570055502, -2.79223891420,\n                         -2.60309212227, -2.00728646156, -1.23024028545, -0.956209854061, -0.890429678442, \n                         0.0349559024681, 0.546156698362, 0.0400591009128, 0.234941837688, 0.181355511206,\n                         -0.335989512042, -0.463551439451, -0.416583500320, 0.167372898873, -0.293055078553, \n                         -0.341087697776, -0.279675928688, 0.155952440289, 0.0591776963077, -0.00563314517619, \n                         0.0822175014391, -0.0885440790171, -0.113680406335, -0.120666350781, -0.106971346707, \n                         -0.196222087322, 0.238469258157, 0.258217566983, 0.185811847296, 0.161828748432,\n                         0.0782651773294, -0.500389551457, -0.207598679635, -0.00551620573419, \n                         -0.0956412655191, -0.049808327, -0.241028829),\n             log_F35 = log(0.0736156723516),\n             log_F40 = log(0.0612999005103),\n             log_F50 = log(0.0428699169247),\n             sigmaR = 1.5,\n             dum = 0)\n\n\nRTMB/TMB use mapping to turn parameters on and off. For the model comparison all parameters are held at the values produced by the ADMB model.\n\n\nCode\n# map ----\nmap = list(log_M = factor(NA),\n           log_a50C = factor(NA),\n           deltaC = factor(NA),\n           log_a50S = factor(NA),\n           deltaS = factor(NA),\n           log_q = factor(NA),\n           log_mean_R = factor(NA),\n           init_log_Rt = factor(rep(NA, 48)),\n           log_Rt = factor(rep(NA, 62)),\n           log_mean_F = factor(NA),\n           log_Ft = factor(rep(NA, 62)),\n           log_F35 = factor(NA),\n           log_F40 = factor(NA),\n           log_F50 = factor(NA),\n           sigmaR = factor(NA))\n\n\nA model run is done using the MakeADFun function.\nSince the parameters are fixed, there is no optimization run for this model.\n\n\nCode\n# run ----\n\n obj &lt;- RTMB::MakeADFun(f, \n                        pars, \n                        map = map)            \n\nreport &lt;- obj$report(obj$env$last.par.best)\nproj_bio(report)"
  },
  {
    "objectID": "comparisons.html",
    "href": "comparisons.html",
    "title": "Model comparisons",
    "section": "",
    "text": "Code\n# retrieve data/results from ADMB & RT&lt;B models\ndata &lt;- source(here::here('data', 'nork_data_2022.r'))\nrtmb &lt;- readRDS(here::here('data', 'rtmb.RData'))\nrtmb_proj &lt;- readRDS(here::here('data', 'rtmb_proj.RData'))\ncatch &lt;- read.csv(here::here('data', 'catch.csv'))\nsrv &lt;- read.csv(here::here('data', 'survey.csv'))\nfac &lt;- read.csv(here::here('data', 'fac.csv'))\nsac &lt;- read.csv(here::here('data', 'sac.csv'))\nfsc &lt;- read.csv(here::here('data', 'fsc.csv'))\nslx &lt;- read.csv(here::here('data', 'selex.csv'))\nbio &lt;- read.csv(here::here('data', 'bio_rec_f.csv'))\nn_proj &lt;- read.csv(here::here('data', 'n_proj.csv'))\nb40 &lt;- read.csv(here::here('data', 'b35_b40_yld.csv'))\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\ntheme_set(afscassess::theme_report())\n\n\n\n\n\nNo discernible differences in selectivity observed.\n\n\n\nCode\nas.data.frame(rtmb$slx) %&gt;% \n  rename(fishery = V1, survey = V2) %&gt;% \n  bind_cols(slx) %&gt;% \n  mutate(fish_diff = (fishery - fish) / fish,\n         srv_diff = (survey - srv1) / srv1) -&gt; df\n  \ndf %&gt;% \n  pivot_longer(-c(age, maturity, fish_diff, srv_diff)) %&gt;% \n  ggplot(aes(age, value, color = name)) + \n  geom_line()\n\n\n\n\n\nCode\ndf %&gt;% \n  pivot_longer(c(fish_diff, srv_diff)) %&gt;% \n  ggplot(aes(age, value, color = name)) + \n  geom_line() +\n  scale_y_continuous(labels = scales::percent) +\n  ylab('percent difference') +\n    geom_hline(yintercept=0, lty=3)\n\n\n\n\n\n\n\n\n\nNo discernible differences in biomass observed.\n\n\n\nCode\ndata.frame(ssb = rtmb$spawn_bio,\n           tot = rtmb$tot_bio) %&gt;% \n  bind_cols(bio) %&gt;% \n  mutate(tot_diff = (tot - tot_biom) / tot_biom,\n         sb_diff = (ssb - sp_biom) / sp_biom) -&gt; df1\n\n  df1 %&gt;% \n  pivot_longer(c(ssb, tot, tot_biom, sp_biom)) %&gt;% \n  ggplot(aes(year, value, color = name)) + \n  geom_line()\n\n\n\n\n\nCode\n  df1 %&gt;% \n  pivot_longer(c(tot_diff, sb_diff)) %&gt;% \n  ggplot(aes(year, value, color = name)) + \n  geom_line() +\n  scale_y_continuous(labels = scales::percent) +\n  ylab('percent difference') +\n    geom_hline(yintercept=0, lty=3)\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n## fish age comp\ndata.frame(age = rtmb$ages, \n           rtmb$fish_age_pred) %&gt;% \n  pivot_longer(-age) %&gt;% \n  mutate(year = rep(fish_age_yrs, length(ages)),\n         groups = 'pred2') %&gt;% \n  bind_rows(fac) -&gt; df2\n\ndf2 %&gt;% \n  ggplot(aes(age, value, color = groups)) + \n  geom_line() +\n  facet_wrap(~year)\n\n\n\n\n\nCode\ndf2 %&gt;% \n  select(age, value, year, groups) %&gt;% \n  filter(groups!='obs') %&gt;% \n  pivot_wider(names_from=groups, values_from = value) %&gt;% \n  mutate(diff = (pred2 - pred) / pred,\n         Age = factor(age)) %&gt;% \n    pivot_longer(diff) %&gt;% \n  ggplot(aes(year, value, color = Age)) + \n  geom_line() +\n  # facet_wrap(~year) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab('percent difference') +\n    geom_hline(yintercept=0, lty=3)\n\n\n\n\n\n\n\n\n\n\nCode\n## fish age comp\ndata.frame(age = rtmb$ages, \n           rtmb$srv_age_pred) %&gt;% \n  pivot_longer(-age) %&gt;% \n  mutate(year = rep(srv_age_yrs, length(ages)),\n         groups = 'pred2') %&gt;% \n  bind_rows(sac) -&gt; df3\n\ndf3 %&gt;% \n  ggplot(aes(age, value, color = groups)) + \n  geom_line() +\n  facet_wrap(~year)\n\n\n\n\n\nCode\ndf2 %&gt;% \n  select(age, value, year, groups) %&gt;% \n  filter(groups!='obs') %&gt;% \n  pivot_wider(names_from=groups, values_from = value) %&gt;% \n  mutate(diff = (pred2 - pred) / pred,\n         Age = factor(age)) %&gt;% \n    pivot_longer(diff) %&gt;% \n  ggplot(aes(year, value, color = Age)) + \n  geom_line() +\n  # facet_wrap(~year) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab('percent difference') +\n    geom_hline(yintercept=0, lty=3)\n\n\n\n\n\n\n\n\n\n\nCode\n## fish age comp\ndata.frame(length = length_bins, \n           rtmb$fish_size_pred) %&gt;% \n  pivot_longer(-length) %&gt;% \n  mutate(year = rep(fish_size_yrs, length(length_bins)),\n         groups = 'pred2') %&gt;% \n  bind_rows(fsc) -&gt; df4\n\ndf4 %&gt;% \n  ggplot(aes(length, value, color = groups)) + \n  geom_line() +\n  facet_wrap(~year)\n\n\n\n\n\nCode\ndf4 %&gt;% \n  select(length, value, year, groups) %&gt;% \n  filter(groups!='obs') %&gt;% \n  pivot_wider(names_from=groups, values_from = value) %&gt;% \n  mutate(diff = (pred2 - pred) / pred,\n         Length = factor(length)) %&gt;% \n    pivot_longer(diff) %&gt;% \n  ggplot(aes(year, value, color = Length)) + \n  geom_line() +\n  # facet_wrap(~year) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab('percent difference') +\n    geom_hline(yintercept=0, lty=3)\n\n\n\n\n\n\n\n\n\n\nCode\n## F values\n\n\ndata.frame(year = bio$year,\n           admb = bio$F,\n           rtmb = rtmb$Ft * max(rtmb$slx[,1])) %&gt;% \n  mutate(diff = admb - rtmb) -&gt; df5\n\ndf5 %&gt;% \n  pivot_longer(-c(year, diff)) %&gt;% \n  ggplot(aes(year, value, color = name)) + \n  geom_line() \n\n\n\n\n\nCode\ndf5 %&gt;% \n    pivot_longer(diff) %&gt;% \n  ggplot(aes(year, value)) + \n  geom_line() +\n  # facet_wrap(~year) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab('percent difference') +\n    geom_hline(yintercept=0, lty=3)\n\n\n\n\n\n\n\n\n\nADMB output:\n\n\nCode\n# admb\ndata.frame(b0 = 82349.7, b40 = 32939.9, b35 = 28822.4,\n           f40 = 0.0612999, f35 = 0.0736157)\n\n\n       b0     b40     b35       f40       f35\n1 82349.7 32939.9 28822.4 0.0612999 0.0736157\n\n\nCode\ndata.frame(year = 2023:2024,\n           spawn_bio = c(39462.6, 37360.3),\n           tot_bio = c(95559.2, 92840.4),\n           abc = c(4971.65, 4734.3),\n           ofl = c(5935.16, 5651.9))\n\n\n  year spawn_bio tot_bio     abc     ofl\n1 2023   39462.6 95559.2 4971.65 5935.16\n2 2024   37360.3 92840.4 4734.30 5651.90\n\n\nRTMB output:\n\n\nCode\n# rtmb\ndata.frame(b0 = rtmb$B0, b40 = rtmb$B40, b35 = rtmb$B35) \n\n\n        b0      b40      b35\n1 82349.84 32939.95 28822.46\n\n\nCode\nrtmb_proj\n\n\n  year spawn_bio  tot_bio catch_abc catch_ofl       F40        F35\n1 2023  39462.66 95559.35  4971.655  5935.173 0.0612999 0.07361567\n2 2024  37360.40 92840.50  4734.307  5651.909 0.0612999 0.07361567"
  },
  {
    "objectID": "comparisons.html#selectivity",
    "href": "comparisons.html#selectivity",
    "title": "Model comparisons",
    "section": "",
    "text": "No discernible differences in selectivity observed.\n\n\n\nCode\nas.data.frame(rtmb$slx) %&gt;% \n  rename(fishery = V1, survey = V2) %&gt;% \n  bind_cols(slx) %&gt;% \n  mutate(fish_diff = (fishery - fish) / fish,\n         srv_diff = (survey - srv1) / srv1) -&gt; df\n  \ndf %&gt;% \n  pivot_longer(-c(age, maturity, fish_diff, srv_diff)) %&gt;% \n  ggplot(aes(age, value, color = name)) + \n  geom_line()\n\n\n\n\n\nCode\ndf %&gt;% \n  pivot_longer(c(fish_diff, srv_diff)) %&gt;% \n  ggplot(aes(age, value, color = name)) + \n  geom_line() +\n  scale_y_continuous(labels = scales::percent) +\n  ylab('percent difference') +\n    geom_hline(yintercept=0, lty=3)"
  },
  {
    "objectID": "comparisons.html#biomass",
    "href": "comparisons.html#biomass",
    "title": "Model comparisons",
    "section": "",
    "text": "No discernible differences in biomass observed.\n\n\n\nCode\ndata.frame(ssb = rtmb$spawn_bio,\n           tot = rtmb$tot_bio) %&gt;% \n  bind_cols(bio) %&gt;% \n  mutate(tot_diff = (tot - tot_biom) / tot_biom,\n         sb_diff = (ssb - sp_biom) / sp_biom) -&gt; df1\n\n  df1 %&gt;% \n  pivot_longer(c(ssb, tot, tot_biom, sp_biom)) %&gt;% \n  ggplot(aes(year, value, color = name)) + \n  geom_line()\n\n\n\n\n\nCode\n  df1 %&gt;% \n  pivot_longer(c(tot_diff, sb_diff)) %&gt;% \n  ggplot(aes(year, value, color = name)) + \n  geom_line() +\n  scale_y_continuous(labels = scales::percent) +\n  ylab('percent difference') +\n    geom_hline(yintercept=0, lty=3)"
  },
  {
    "objectID": "comparisons.html#comps",
    "href": "comparisons.html#comps",
    "title": "Model comparisons",
    "section": "",
    "text": "Code\n## fish age comp\ndata.frame(age = rtmb$ages, \n           rtmb$fish_age_pred) %&gt;% \n  pivot_longer(-age) %&gt;% \n  mutate(year = rep(fish_age_yrs, length(ages)),\n         groups = 'pred2') %&gt;% \n  bind_rows(fac) -&gt; df2\n\ndf2 %&gt;% \n  ggplot(aes(age, value, color = groups)) + \n  geom_line() +\n  facet_wrap(~year)\n\n\n\n\n\nCode\ndf2 %&gt;% \n  select(age, value, year, groups) %&gt;% \n  filter(groups!='obs') %&gt;% \n  pivot_wider(names_from=groups, values_from = value) %&gt;% \n  mutate(diff = (pred2 - pred) / pred,\n         Age = factor(age)) %&gt;% \n    pivot_longer(diff) %&gt;% \n  ggplot(aes(year, value, color = Age)) + \n  geom_line() +\n  # facet_wrap(~year) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab('percent difference') +\n    geom_hline(yintercept=0, lty=3)\n\n\n\n\n\n\n\n\n\n\nCode\n## fish age comp\ndata.frame(age = rtmb$ages, \n           rtmb$srv_age_pred) %&gt;% \n  pivot_longer(-age) %&gt;% \n  mutate(year = rep(srv_age_yrs, length(ages)),\n         groups = 'pred2') %&gt;% \n  bind_rows(sac) -&gt; df3\n\ndf3 %&gt;% \n  ggplot(aes(age, value, color = groups)) + \n  geom_line() +\n  facet_wrap(~year)\n\n\n\n\n\nCode\ndf2 %&gt;% \n  select(age, value, year, groups) %&gt;% \n  filter(groups!='obs') %&gt;% \n  pivot_wider(names_from=groups, values_from = value) %&gt;% \n  mutate(diff = (pred2 - pred) / pred,\n         Age = factor(age)) %&gt;% \n    pivot_longer(diff) %&gt;% \n  ggplot(aes(year, value, color = Age)) + \n  geom_line() +\n  # facet_wrap(~year) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab('percent difference') +\n    geom_hline(yintercept=0, lty=3)\n\n\n\n\n\n\n\n\n\n\nCode\n## fish age comp\ndata.frame(length = length_bins, \n           rtmb$fish_size_pred) %&gt;% \n  pivot_longer(-length) %&gt;% \n  mutate(year = rep(fish_size_yrs, length(length_bins)),\n         groups = 'pred2') %&gt;% \n  bind_rows(fsc) -&gt; df4\n\ndf4 %&gt;% \n  ggplot(aes(length, value, color = groups)) + \n  geom_line() +\n  facet_wrap(~year)\n\n\n\n\n\nCode\ndf4 %&gt;% \n  select(length, value, year, groups) %&gt;% \n  filter(groups!='obs') %&gt;% \n  pivot_wider(names_from=groups, values_from = value) %&gt;% \n  mutate(diff = (pred2 - pred) / pred,\n         Length = factor(length)) %&gt;% \n    pivot_longer(diff) %&gt;% \n  ggplot(aes(year, value, color = Length)) + \n  geom_line() +\n  # facet_wrap(~year) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab('percent difference') +\n    geom_hline(yintercept=0, lty=3)\n\n\n\n\n\n\n\n\n\n\nCode\n## F values\n\n\ndata.frame(year = bio$year,\n           admb = bio$F,\n           rtmb = rtmb$Ft * max(rtmb$slx[,1])) %&gt;% \n  mutate(diff = admb - rtmb) -&gt; df5\n\ndf5 %&gt;% \n  pivot_longer(-c(year, diff)) %&gt;% \n  ggplot(aes(year, value, color = name)) + \n  geom_line() \n\n\n\n\n\nCode\ndf5 %&gt;% \n    pivot_longer(diff) %&gt;% \n  ggplot(aes(year, value)) + \n  geom_line() +\n  # facet_wrap(~year) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab('percent difference') +\n    geom_hline(yintercept=0, lty=3)"
  },
  {
    "objectID": "comparisons.html#bs",
    "href": "comparisons.html#bs",
    "title": "Model comparisons",
    "section": "",
    "text": "ADMB output:\n\n\nCode\n# admb\ndata.frame(b0 = 82349.7, b40 = 32939.9, b35 = 28822.4,\n           f40 = 0.0612999, f35 = 0.0736157)\n\n\n       b0     b40     b35       f40       f35\n1 82349.7 32939.9 28822.4 0.0612999 0.0736157\n\n\nCode\ndata.frame(year = 2023:2024,\n           spawn_bio = c(39462.6, 37360.3),\n           tot_bio = c(95559.2, 92840.4),\n           abc = c(4971.65, 4734.3),\n           ofl = c(5935.16, 5651.9))\n\n\n  year spawn_bio tot_bio     abc     ofl\n1 2023   39462.6 95559.2 4971.65 5935.16\n2 2024   37360.3 92840.4 4734.30 5651.90\n\n\nRTMB output:\n\n\nCode\n# rtmb\ndata.frame(b0 = rtmb$B0, b40 = rtmb$B40, b35 = rtmb$B35) \n\n\n        b0      b40      b35\n1 82349.84 32939.95 28822.46\n\n\nCode\nrtmb_proj\n\n\n  year spawn_bio  tot_bio catch_abc catch_ofl       F40        F35\n1 2023  39462.66 95559.35  4971.655  5935.173 0.0612999 0.07361567\n2 2024  37360.40 92840.50  4734.307  5651.909 0.0612999 0.07361567"
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Model and utilities",
    "section": "",
    "text": "Model and utilities\nThe following code is the RTMB equivalent of ADMB model 22.1 which was last full model accepted by the SSC for northern rockfish.\n\n\nCode\nf &lt;- function(pars) {\n  require(RTMB)\n  RTMB::getAll(pars, data)\n  # setup -------------\n  M = exp(log_M)\n  a50C = exp(log_a50C)\n  a50S = exp(log_a50S)\n  q = exp(log_q)\n  spawn_fract = (spawn_mo - 1) / 12\n  spawn_adj = exp(-M)^(spawn_fract)\n  A = nrow(age_error)\n  A1 = length(ages)\n  T = length(catch_obs)\n  Ts = sum(srv_ind)\n  Tfa = sum(fish_age_ind)\n  Tsa = sum(srv_age_ind)\n  Tfs = sum(fish_size_ind)\n  Tproj = 15\n  L = length(length_bins)\n  cwt = unique(catch_wt) # time blocks for catch weighting\n  g = 0.00001 # small number\n  F50 = exp(log_F50)\n  F40 = exp(log_F40)\n  F35 = exp(log_F35)\n\n  # containers ---------\n  slx = matrix(NA, A, 2)\n  Bat = Cat = Nat = Fat = Zat = Sat = matrix(0, A, T)\n  initNat = rep(0, A)\n  catch_pred = rep(0, T)\n  srv_pred = rep(0, Ts)\n  fish_age_pred = matrix(0, A1, Tfa)\n  srv_age_pred = matrix(0, A1, Tsa)\n  fish_size_pred = matrix(0, L, Tfs)\n  spawn_bio = tot_bio = rep(0, T)\n  N_spr = sb_spr = matrix(1, A, 4)\n  \n  # priors -----------------\n  # prefer using dnorm but want to match admb exactly\n  # won't affect nll location, but values will be slightly different\n  # admb priors do not include a constant that is in dnorm\n  # nll_M = dnorm(M, mean_M, cv_M, TRUE)\n  # nll_q = dnorm(q, mean_q, cv_q, TRUE)\n  # nll_sigmaR = dnorm(sigmaR, mean_sigmaR, cv_sigmaR, TRUE)\n  \n  nll_M = (log_M - log(mean_M))^2 / (2 * cv_M^2)\n  nll_q = (log_q - log(mean_q))^2 / (2 * cv_q^2)\n  nll_sigmaR= (log(sigmaR / mean_sigmaR))^2 / (2 * cv_sigmaR^2)\n  \n  # analysis ----------\n  # selectivity\n  sel &lt;- function(a, a50, delta) {\n    1. / (1. + exp(-2.944438979 * ((a+1) - a50) / delta))\n  }\n  \n  for(a in 1:A) {\n    slx[a,1] = sel(a, a50C, deltaC)\n    slx[a,2] = sel(a, a50S, deltaS)\n  }\n  \n  # mortality\n  Ft = exp(log_mean_F + log_Ft)\n  for(t in 1:T){\n    for(a in 1:A) {\n      Fat[a,t] = Ft[t] * slx[a,1]\n      Zat[a,t] = Fat[a,t] + M\n      Sat[a,t] = exp(-Zat[a,t])\n    }\n  }\n  # population ----\n  ## Bzero\n  # initNat[1] = exp(log_mean_R)\n  # for (a in 2:A) {\n  #   initNat[a] &lt;- initNat[a-1] * exp(-M)\n  # }\n  # initNat[A] &lt;- initNat[A] / (1 - exp(-M))\n  # Bzero = sum(initNat * wt_mature * spawn_adj)\n  \n  ## numbers at age\n  # populate first row\n  # need to use correct log_Rt to match ADMB model\n  for(t in 1:T) {\n    Nat[1,t] = exp(log_mean_R + log_Rt[t])\n  }\n  # populate first column\n  for(a in 2:(A-1)) {\n    Nat[a,1] = exp(log_mean_R - (a-1) * M + init_log_Rt[a-1])\n  }\n  Nat[A,1] = exp(log_mean_R - (A-1) * M) / (1 - exp(-M))\n  \n  for(t in 2:T) {\n    for(a in 2:A) {\n      Nat[a,t] = Nat[a-1,t-1] * Sat[a-1,t-1]\n    }\n    Nat[A,t] = Nat[A,t] + Nat[A,t-1] * Sat[A,t-1]\n  }\n  \n  #     # spawn_bio\n  for(t in 1:T) {\n    spawn_bio[t] = sum(Nat[,t] * wt_mature)\n    tot_bio[t] = sum(Nat[,t] * waa)\n  }\n  # flag - should be:\n  # spawn_bio[T] = sum(Nat[,T] * spawn_adj * wt_mature)\n  \n  \n  # catch\n  for(t in 1:T){\n    for(a in 1:A){\n      Cat[a,t] = Fat[a,t] / Zat[a,t] * Nat[a,t] * (1.0 - Sat[a,t])\n    }\n    catch_pred[t] = sum(Cat[,t] * waa)\n  }\n  \n  # survey biomass ----\n  isrv = 1\n  srv_like = 0.0\n  # survey biomass & likelihood\n  for(t in 1:T) {\n    if(srv_ind[t]==1) {\n      # for(a in 1:A) {\n      srv_pred[isrv] = sum(Nat[,t] * slx[,2] * waa)\n      # }\n      srv_pred[isrv] = srv_pred[isrv] * q\n      # srv_like = srv_like + sum((log(srv_obs[isrv]) - log(srv_pred[isrv]))^2 /\n      #                             (2 * (srv_sd[isrv] / srv_obs[isrv])^2))\n      srv_like = srv_like + sum((srv_obs[isrv]-srv_pred[isrv])^2/ (2.*(srv_sd[isrv]^2)))\n      isrv = isrv + 1\n    }\n  }\n  \n  # fishery age comp\n  icomp = 1\n  for(t in 1:T) {\n    if(fish_age_ind[t] == 1) {\n      fish_age_pred[,icomp] = as.numeric(colSums((Cat[,t] / sum(Cat[,t])) * age_error))\n      # fish_age_lk[icomp] = sum(fish_age_iss[icomp] * ((fish_age_obs[,icomp] + g) * log((fish_age_pred[,icomp] + g / (fish_age_obs[,icomp] + g)))))\n      icomp = icomp + 1\n    }\n  }\n  \n  # survey age comp\n  icomp = 1\n  for(t in 1:T) {\n    if(srv_age_ind[t] == 1) {\n      srv_age_pred[,icomp] = as.numeric(colSums((Nat[,t] * slx[,2]) / sum(Nat[,t] * slx[,2]) * age_error))\n      icomp = icomp + 1\n    }\n  }\n  \n  # fishery size comp\n  icomp = 1\n  for(t in 1:T) {\n    if(fish_size_ind[t] == 1) {\n      fish_size_pred[,icomp] = as.numeric(colSums((Cat[,t] / sum(Cat[,t])) * size_age))\n      # fish_age_lk[icomp] = sum(fish_age_iss[icomp] * ((fish_age_obs[,icomp] + g) * log((fish_age_pred[,icomp] + g / (fish_age_obs[,icomp] + g)))))\n      icomp = icomp + 1\n    }\n  }\n  \n  # SPR ------------------------\n  data.frame(log_Rt = log_Rt,\n             pred_rec = Nat[1,],\n             year = years) -&gt; df\n  # filter years 1979:\n  df = df[years&gt;=(1977+ages[1]) & years&lt;=(max(years)-ages[1]),]\n  pred_rec = mean(df$pred_rec)\n  stdev_rec = sqrt(sum((df$log_Rt - mean(df$log_Rt))^2) / (length(df$log_Rt) - 1))\n  for(a in 2:A) {\n    N_spr[a,1] = N_spr[a-1,1] * exp(-M)\n    N_spr[a,2] = N_spr[a-1,2] * exp(-(M + F50 * slx[a-1,1]))\n    N_spr[a,3] = N_spr[a-1,3] * exp(-(M + F40 * slx[a-1,1]))\n    N_spr[a,4] = N_spr[a-1,4] * exp(-(M + F35 * slx[a-1,1]))\n  }\n  \n  N_spr[A,1] = N_spr[A-1,1] * exp(-M) / (1 - exp(-M))\n  N_spr[A,2] = N_spr[A-1,2] * exp(-(M + F50 * slx[A-1,1])) / (1 - exp(-(M + F50 * slx[A,1])))\n  N_spr[A,3] = N_spr[A-1,3] * exp(-(M + F40 * slx[A-1,1])) / (1 - exp(-(M + F40 * slx[A,1])))\n  N_spr[A,4] = N_spr[A-1,4] * exp(-(M + F35 * slx[A-1,1])) / (1 - exp(-(M + F35 * slx[A,1])))\n  \n  for(a in 1:A) {\n    sb_spr[a,1] = N_spr[a,1] * wt_mature[a] * exp(-spawn_fract * M)\n    sb_spr[a,2] = N_spr[a,2] * wt_mature[a] * exp(-spawn_fract * (M + F50 * slx[a,1]))\n    sb_spr[a,3] = N_spr[a,3] * wt_mature[a] * exp(-spawn_fract * (M + F40 * slx[a,1]))\n    sb_spr[a,4] = N_spr[a,4] * wt_mature[a] * exp(-spawn_fract * (M + F35 * slx[a,1]))\n  }\n  \n  SB0 = sum(sb_spr[,1])\n  SBF50 = sum(sb_spr[,2])\n  SBF40 = sum(sb_spr[,3])\n  SBF35 = sum(sb_spr[,4])\n  \n  sprpen = 100. * (SBF50 / SB0 - 0.5)^2\n  sprpen = sprpen + 100. * (SBF40 / SB0 - 0.4)^2\n  sprpen = sprpen + 100. * (SBF35 / SB0 - 0.35)^2\n  \n  B0 = SB0 * pred_rec\n  B40 = SBF40 * pred_rec\n  B35 = SBF35 * pred_rec\n  \n  \n  # likelihoods --------------------\n  # catch\n  ssqcatch = sum(catch_wt * (log(catch_obs + g) - log(catch_pred + g))^2)\n  \n  # fishery age comp\n  fish_age_lk = 0.0\n  offset = 0.0\n  for(t in 1:Tfa) {\n    offset = offset - fish_age_iss[t] * sum((fish_age_obs[,t] + g) * log(fish_age_obs[,t] + g))\n    fish_age_lk = fish_age_lk - sum(fish_age_iss[t] * (fish_age_obs[,t] + g) * log(fish_age_pred[,t] + g))\n  }\n  fish_age_lk = fish_age_lk - offset\n  \n  # survey age comp\n  srv_age_lk = 0.0\n  offset_sa = 0.0\n  for(t in 1:Tsa) {\n    # for(a in 1:A1) {\n    offset_sa = offset_sa - srv_age_iss[t] * sum((srv_age_obs[,t] + g) * log(srv_age_obs[,t] + g))\n    srv_age_lk = srv_age_lk - srv_age_iss[t] * sum((srv_age_obs[,t] + g) * log(srv_age_pred[,t] + g))\n    # }\n  }\n  srv_age_lk = srv_age_lk - offset_sa\n  \n  # fishery size comp\n  fish_size_lk = 0.0\n  offset_fs = 0.0\n  for(t in 1:Tfs) {\n    # for(l in 1:L) {\n    offset_fs = offset_fs - fish_size_iss[t] * sum((fish_size_obs[,t] + g) * log(fish_size_obs[,t] + g))\n    fish_size_lk = fish_size_lk - fish_size_iss[t] * sum((fish_size_obs[,t] + g) * log(fish_size_pred[,t] + g))\n    # }\n  }\n  fish_size_lk = fish_size_lk - offset_fs\n  \n  like_srv = srv_like * srv_wt\n  like_fish_age = fish_age_lk * fish_age_wt\n  like_srv_age = srv_age_lk * srv_age_wt\n  like_fish_size = fish_size_lk * fish_size_wt\n  # like_rec = sum(log_Rt^2) / (2 * sigmaR^2) + (length(log_Rt) * log(sigmaR))\n  like_rec = sum((c(log_Rt , init_log_Rt) + sigmaR * sigmaR / 2)^2) / (2 * sigmaR^2)\n  f_regularity = wt_fmort_reg * sum(log_Ft^2)\n  \n  nll = 0.0\n  nll = ssqcatch\n  nll = nll + like_srv\n  nll = nll + like_fish_age\n  nll = nll + like_srv_age\n  nll = nll + like_fish_size\n  nll = nll + like_rec * wt_rec_var\n  nll = nll + f_regularity\n  nll = nll - nll_M\n  nll = nll - nll_q\n  nll = nll + sprpen\n  \n  # reports -------------------\n  RTMB::REPORT(ages)\n  RTMB::REPORT(years)\n  RTMB::REPORT(M)\n  RTMB::REPORT(a50C)\n  RTMB::REPORT(deltaC)\n  RTMB::REPORT(a50S)\n  RTMB::REPORT(deltaS)\n  RTMB::REPORT(q)\n  RTMB::REPORT(sigmaR)\n  RTMB::REPORT(log_mean_R)\n  RTMB::REPORT(log_Rt)\n  RTMB::REPORT(log_mean_F)\n  RTMB::REPORT(log_Ft)\n  RTMB::REPORT(waa)\n  RTMB::REPORT(wt_mature)\n  RTMB::REPORT(yield_ratio)\n  RTMB::REPORT(Fat)\n  RTMB::REPORT(Zat)\n  RTMB::REPORT(Sat)\n  RTMB::REPORT(Cat)\n  RTMB::REPORT(Nat)\n  RTMB::REPORT(slx)\n  RTMB::REPORT(Ft)\n  RTMB::REPORT(catch_pred)\n  RTMB::REPORT(srv_pred)\n  \n  RTMB::REPORT(fish_age_pred)\n  RTMB::REPORT(srv_age_pred)\n  RTMB::REPORT(fish_size_pred)\n  \n  RTMB::REPORT(tot_bio)\n  RTMB::REPORT(spawn_bio)\n  RTMB::REPORT(spawn_fract)\n  RTMB::REPORT(B0)\n  RTMB::REPORT(B40)\n  RTMB::REPORT(B35)\n  RTMB::REPORT(F35)\n  RTMB::REPORT(F40)\n  RTMB::REPORT(F50)\n  RTMB::REPORT(pred_rec)\n  RTMB::REPORT(stdev_rec)\n  RTMB::REPORT(ssqcatch)\n  RTMB::REPORT(like_srv)\n  RTMB::REPORT(like_fish_age)\n  RTMB::REPORT(like_srv_age)\n  RTMB::REPORT(like_fish_size)\n  RTMB::REPORT(like_rec)\n  RTMB::REPORT(f_regularity)\n  RTMB::REPORT(sprpen)\n  RTMB::REPORT(nll_q)\n  RTMB::REPORT(nll_M)\n  RTMB::REPORT(nll)\n  # nll = 0.0\n  return(nll)\n}\n\n\nSome utility functions are used for model runs and examinations. The proj_bio() function is a two part function, the first use is to estimate and retrieve\n\n\nCode\nproj_bio &lt;- function(report, obj=NULL, post=NULL, reps = nrow(post)) {\n  \n   # values\n  F40 = report$F40\n  F35 = report$F35\n  B40 = report$B40\n  Nat = report$Nat\n  Sat = report$Sat\n  slx = report$slx\n  ages = report$ages\n  years = report$years\n  waa = report$waa\n  wt_mature = report$wt_mature\n  spawn_frac = report$spawn_fract\n  yield_ratio = report$yield_ratio\n  M = report$M\n  pred_rec = report$pred_rec\n  stdev_rec = report$stdev_rec \n  A = nrow(Nat) # number of ages\n  T = ncol(Nat) # number of years\n  \n  # storage\n  if(!is.null(post)) {\n    surv = get_survival(post=post, obj=obj, reps = reps)\n    Tproj = 15\n    N = Fabc_tot = Fofl_tot = replicate(reps, matrix(0, A, Tproj), simplify = FALSE)\n    F40_proj = F35_proj = spawn_bio = tot_bio = replicate(reps, rep(0, Tproj), simplify = FALSE)\n    for(i in 1:reps) {\n      F40_proj[[i]] = rep(F40, Tproj)\n      F35_proj[[i]] = rep(F35, Tproj)\n      \n      # total F\n      Fabc_tot[[i]][,1] = report$slx[,1] * F40\n      Fofl_tot[[i]][,1] = report$slx[,1] * F35\n      \n      # populate abundance\n      N[[i]][1,] = exp(log(pred_rec) - (stdev_rec)^2 / 2 + stdev_rec + rnorm(15))\n      \n      for(a in 1:(A-1)) {\n        N[[i]][a+1,1] = surv[,i][a]\n      }\n      N[[i]][A,1] = surv[,i][A-1] + surv[,i][A]\n      spawn_bio[i][1] = sum(N[[i]][,1] * exp(-yield_ratio * unlist(Fabc_tot[[i]][,1]) - M)^spawn_frac * wt_mature)\n      tot_bio[[i]][1] = sum(N[[i]][,1] * waa)   \n      \n      for(t in 1:Tproj) {\n        # tier check\n        if((spawn_bio[[i]][t] / B40) &lt;= 1) {\n          F40_proj[[i]][t] = F40_proj[[i]][t] * (spawn_bio[[i]][t] / B40 - 0.05) / 0.95\n          F35_proj[[i]][t] = F35_proj[[i]][t] * (spawn_bio[[i]][t] / B40 - 0.05) / 0.95\n        }\n        # update \n        Fabc_tot[[i]][,t] = report$slx[,1] * F40_proj[[i]][t]\n        Fofl_tot[[i]][,t] = report$slx[,1] * F35_proj[[i]][t]\n        Z_proj = unlist(Fabc_tot) + M\n        Zofl_proj = unlist(Fofl_tot) + M\n        S_proj = exp(-Z_proj)\n        \n        # catch\n        # Cat_proj[,t] = yield_ratio * N_proj[,t] * Fabc_tot_proj / Z_proj * (1 - S_proj)\n        # Cat_ofl_proj[,t] = yield_ratio * N_proj[,t] * Fofl_tot_proj / Zofl_proj * (1 - exp(-Zofl_proj))\n        \n        if(t&lt;Tproj) {\n          for(a in 1:(A-1)){\n            N[[i]][a+1,t+1] = N[[i]][a,t] * exp(-yield_ratio * unlist(Fabc_tot[i])[a] - M)\n          }\n          N[[i]][A,t+1] = N[[i]][A-1,t] * exp(-yield_ratio * unlist(Fabc_tot[i])[A-1] - M) +\n            N[[i]][A,t] * exp(-yield_ratio * unlist(Fabc_tot[i])[A] - M)\n          \n          tot_bio[[i]][t+1] = sum(N[[i]][,t+1] * waa)  \n          spawn_bio[[i]][t+1] = sum(N[[i]][,t+1] * exp(-yield_ratio * unlist(Fabc_tot[[i]][,t]) - M)^spawn_frac * wt_mature)\n        }\n      }\n    }\n    \n    do.call(rbind, spawn_bio) %&gt;% \n      as.data.frame() %&gt;% \n      mutate(sim = 1:n()) %&gt;% \n      tidyr::pivot_longer(-sim) %&gt;% \n      mutate(year = as.numeric(gsub('V','', name)) + max(years),\n             id = 'spawn_bio') %&gt;% \n      select(-name) %&gt;% \n      dplyr::bind_rows(\n        do.call(rbind, tot_bio) %&gt;% \n          as.data.frame() %&gt;% \n          mutate(sim = 1:n()) %&gt;% \n          tidyr::pivot_longer(-sim) %&gt;% \n          mutate(year = as.numeric(gsub('V','', name)) + max(years),\n                 id = 'tot_bio') %&gt;% \n          select(-name))\n    \n  } else {\n    Tproj = 2\n    N = Cat = Cat_ofl= Zabc = Zofl = S = matrix(0, A, Tproj)\n    tot_bio = spawn_bio = F40_proj = F35_proj= rep(0, Tproj)\n    # setup\n    F40_proj[1] = F40\n    F35_proj[1] = F35\n    \n    # total F\n    Fabc_tot = slx[,1] * F40_proj[1]\n    Fofl_tot = slx[,1] * F35_proj[1]\n    \n    # first projection year\n    N[1,] = pred_rec\n    for(a in 1:(A-1)) {\n      N[a+1,1] = Nat[a,T] * Sat[a,T]\n    }\n    N[A,1] = Nat[A-1,T] * Sat[A-1,T] + Nat[A,T] * Sat[A,T]\n    spawn_bio[1] = sum(N[,1] * exp(-yield_ratio * Fabc_tot - M)^spawn_frac * wt_mature)\n    \n    for(t in 1:Tproj) {\n      # tier check\n      if((spawn_bio[t] / B40) &gt; 1) {\n        F40_proj[t] = F40\n        F35_proj[t] = F35\n      } else {\n        F40_proj[t] = F40_proj[t] * (spawn_bio[t] / B40 - 0.05) / 0.95\n        F35_proj[t] = F35_proj[t] * (spawn_bio[t] / B40 - 0.05) / 0.95\n      }\n      # update\n      Fabc_tot = report$slx[,1] * F40_proj[t]\n      Fofl_tot = report$slx[,1] * F35_proj[t]\n      Z = Fabc_tot + M\n      Zofl = Fofl_tot + M\n      S = exp(-Z)\n      \n      # catch\n      Cat[,t] = yield_ratio * N[,t] * Fabc_tot / Z * (1 - S)\n      Cat_ofl[,t] = yield_ratio * N[,t] * Fofl_tot / Zofl * (1 - exp(-Zofl))\n      \n      if(t&lt;Tproj) {\n        for(a in 1:(A-1)){\n          N[a+1,t+1] = N[a,t] * exp(-yield_ratio * Fabc_tot[a] - M)\n        }\n        N[A,t+1] = N[A-1,t] * exp(-yield_ratio * Fabc_tot[A-1] - M) +\n          N[A,t] * exp(-yield_ratio * Fabc_tot[A] - M)\n        \n        tot_bio[t+1] = sum(N[,t+1] * waa)\n        spawn_bio[t+1] = sum(N[,t+1] * exp(-yield_ratio * Fabc_tot - M)^spawn_frac * wt_mature)\n      }\n    }\n    catch = colSums(Cat * waa / yield_ratio)\n    catch_ofl = colSums(Cat_ofl * waa / yield_ratio)\n    tot_bio = colSums(N * waa)\n    \n    data.frame(year = max(years)+1:Tproj,\n               spawn_bio = spawn_bio,\n               tot_bio = tot_bio,\n               catch_abc = catch,\n               catch_ofl = catch_ofl,\n               F40 = F40_proj,\n               F35 = F35_proj)\n  }\n}\n\n\nget_survival() is a utility function for retrieving individual MCMC estimates and multiplying the last year’s of numbers at age (Nat) by the last year’s survival (Sat) to be used as starting abundances for the first year of the projections.\n\n\nCode\nget_survival &lt;- function(post, obj, reps) {\n  \n  mapit = function(i, post, obj) {\n    surv_i = obj$report(post[i,-ncol(post)])$Nat[,T] * obj$report(post[i,-ncol(post)])$Sat[,T]\n    list(surv_i = surv_i)\n  }\n  results = purrr::map(1:reps, mapit, post=post, obj=obj)\n  do.call(cbind, map(results, \"surv_i\"))\n}\n\n\nget_bio() is a utility function for retrieving individual MCMC estimates of spawning biomass.\n\n\nCode\nget_bio &lt;- function(post, obj, reps) {\n  \n  mapit = function(i, post, obj) {\n    surv_i = obj$report(post[i,-ncol(post)])$spawn_bio\n    list(surv_i = surv_i)\n  }\n  results = purrr::map(1:reps, mapit, post=post, obj=obj)\n  do.call(cbind, map(results, \"surv_i\")) \n    \n}\n\n\nThere are a number of R packages that need to be loaded for this code to successfully run:\n\n\nCode\nlibrary(RTMB)\nlibrary(TMBhelper)\nlibrary(tmbstan)\nlibrary(rstan)\nlibrary(Matrix)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(shinystan)"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Northern Rockfish",
    "section": "",
    "text": "Summary\nThis document describes transferring the Gulf of Alaska northern rockfish assessment from ADMB to RTMB. TMB/RTMB is widely seen as the successor to ADMB which is undergoing an orderly shutdown of development. As specified within the provided code the RTMB model appears to accurately reproduce the ADMB model."
  }
]